/*
**An ACL entry specifies the access permissions on the associated object
**for an individual user or a group of users as a combination of read,
**write and search/execute permissions.
**
**Для работы с ACL нужна подключенная библиотека <sys/acl.h>. Там определены
**типы структур acl_t (например: acl_type_t, acl_flag_t), и функции для
**получения списка расширенных атрибутов файла. Функция acl_get_link_np
**возвращает поинтер типа act_t на ACL или NULL и записывает ошибки в errno:
**(EACCES, EBADF, EINVAL, ENAMETOOLONG, ENOENT, ENOMEM, EOPNOTSUPP).
**Функция acl_get_entry возвращает дескриптор значения ACL, исходя из
**отправленного entry_id (ACL_FIRST_ENTRY, ACL_NEXT_ENTRY), поинтера на ACL
**и поинтера на entry для заполнения. Если в поле entry_id поставлен
**ACL_FIRST_ENTRY, тогда в entry_p вернется дескриптор для первого
**ввода ACL (В ACL entry находится entry tag type, опциональный entry
**tag qualifier, и перечисление доступов/запретов доступа). Если entry_id
** - это ACL_NEXT_ENTRY, вернется дескриптор для следующего ввода.
*/

static void		get_acl(t_file *file)
{
	ssize_t			xattr;
	acl_t			acl;
	acl_entry_t		tmp;

	acl = NULL;
	acl = acl_get_link_np(file->path, ACL_TYPE_EXTENDED); //нельзя сделать обработку ошибок, потому что у нас нет информации, у какого файла расширенные атрибуты и если их не будет у первого файла, он сразу выйдет из проги
	if (acl && acl_get_entry(acl, ACL_FIRST_ENTRY, &tmp) == -1)
	{
		acl_free(acl);
		acl = NULL;
	}
	xattr = listxattr(file->path, NULL, 0, XATTR_NOFOLLOW);
	if (xattr > 0)
		file->mode[10] = '@';
	else if (acl != NULL)
		file->mode[10] = '+';
	else
		file->mode[10] = ' ';
}

# include <sys/acl.h> //для acl
# include <sys/ioctl.h> //для ширины терминала

static int		get_terminal_width(void)
{
	struct winsize	sz;

	ioctl(1, TIOCGWINSZ, &sz);
	return (sz.ws_col);
}

/*
**A device ID consists of two parts: a major ID, identifying the class
** of the device, and a minor ID, identifying a specific instance of a
** device in that class. A device ID is represented using the type dev_t
**that is st_rdev from struct stat.
*/

printf("\n");
	printf("ONE %d\n", columns[0] & FLAG_ONE);
	printf("l %d\n", columns[0] & FLAG_L);
	printf("r %d\n", columns[0] & FLAG_R);
	printf("R %d\n", columns[0] & FLAG_RR);
	printf("a %d\n", columns[0] & FLAG_A);
	printf("G %d\n", columns[0] & FLAG_GG);
	printf("p %d\n", columns[0] & FLAG_P);
	printf("s %d\n", columns[0] & FLAG_S);
	printf("u %d\n", columns[0] & FLAG_U);
	printf("f %d\n", columns[0] & FLAG_F);
	printf("d %d\n", columns[0] & FLAG_D);
	printf("g %d\n", columns[0] & FLAG_G);
	printf("S %d\n", columns[0] & FLAG_SS);
	printf("C %d\n", columns[0] & FLAG_CC);
	printf("c %d\n", columns[0] & FLAG_C);
	printf("F %d\n", columns[0] & FLAG_FF);
	printf("MINUS %d\n", columns[0] & FLAG_MINUS);
	printf("ATTY %d\n", columns[0] & FLAG_ATTY);
	printf("FOLDER_RR %d\n", columns[0] & FLAG_FOLDER_RR);
	printf("\n");